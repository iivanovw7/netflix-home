/**
 * Contains PostCSSExportVars helpers.
 * @module _/tool/plugins/PostCSSExportVars/lib/helpers
 */
'use strict';

const { isEmpty } = require('ramda');

const fs = require('fs');
const { promisify } = require('util');

const ENCODING = 'utf-8';
const writeFileSync = promisify(fs.writeFileSync);

/**
 * First letter capitalize `fn`.
 * @param {string} str - target string.
 * @return {string} result string.
 */
function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

/**
 * Camel text converter `fn`.
 * @param {string} str - string value.
 * @return {string} result string.
 */
function camelCase(str) {
    return capitalizeFirstLetter(str
        // eslint-disable-next-line arrow-body-style
        .replace(/(?:^\w|[A-Z]|\b\w)/g, (word, index) => {
            return index === 0
                ? word.toLowerCase()
                : word.toUpperCase();
        })
        .replace(/\s+/g, '')
        .replace(/-/g, '')
    );
}

/**
 * Create file.
 * @param {Object<string, string>} variables - variables map.
 * @param {module:_/tool/plugins/PostCSSExportVars~ImageMapGeneratorOptions} opts - plugin options.
 * @return {Promise<unknown>} writeFileSync promise.
 */
function createFile(variables, opts) {
    let fileContent = '\'use strict\';\n\n// AUTOGENERATED\nmodule.exports = {\n';

    for (const collectionKey in variables) {
        fileContent += `    ${collectionKey}: '${variables[collectionKey]}',\n`;
    }

    fileContent += '};\n';

    return writeFileSync(opts.file, fileContent, ENCODING);
}

/**
 * Extracts custom properties and sass like variables from value.
 * Return each found variable as array with objects.
 * @param {any} value - css or sass value.
 * @return {Array} extracted variables.
 *
 * @example 'test vars(--var1) + $width'
 *          result in array with objects:
 *          [{origin:'vars(--var1)', variable: '--var1'},{origin:'$width', variable: 'width'}]
 */
function extractVariables(value) {
    const regex = [/var\((.*?)\)/g, /\$([a-zA-Z0-9_-]*)/g];
    const result = [];

    let matchResult;

    regex.forEach((expression) => {
        // eslint-disable-next-line no-cond-assign
        while (matchResult = expression.exec(value)) {
            result.push({ origin: matchResult[0], variable: matchResult[1] });
        }
    });

    return result;
}

/**
 * Resolve references on variable values to other variables.
 * @param {Object<string, string>} variables - variables map.
 */
function resolveReferences(variables) {
    for (const key in variables) {
        const referenceVariables = extractVariables(variables[key]);

        for (let current = 0; current < referenceVariables.length; current++) {
            const { variable, origin: referenceOrigin } = referenceVariables[current];

            if (isEmpty(variables[camelCase(variable)]) === false) {
                variables[key] = variables[key].replace(referenceOrigin, variables[camelCase(variable)]);
            }
        }
    }
}

module.exports = {
    camelCase,
    createFile,
    resolveReferences
};
